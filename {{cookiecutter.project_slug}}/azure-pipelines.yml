variables:
  package: {{ cookiecutter.project_slug }}
  srcDirectory: src/$(package)
  testsDirectory: tests/
  vmImage: windows-latest
  azureProject: {{ cookiecutter.azure_project }}
  artifactFeed: {{ cookiecutter.artifact_feed }}
  publishedVersion: 3.10

trigger:
  - master
  - develop

jobs:

- job: FormattingSafety

  pool:
    vmImage: $(vmImage)

  steps:

    - task: UsePythonVersion@0
      displayName: Use Python $(publishedVersion)
      inputs:
        versionSpec: $(publishedVersion)
    
    - script: python -m pip install --upgrade pip
      displayName: Upgrade pip

    - script: |
        pip install ruff
        ruff $(srcDirectory) $(testsDirectory)
      displayName: Linting check

    - script: |
        pip install black
        black $(srcDirectory) $(testsDirectory)
      displayName: Black formatting check

- job: Build

  strategy:
    matrix:
      python38:
        pythonVersion: 3.8
      python39:
        pythonVersion: 3.9
      python310:
        pythonVersion: 3.10
      python311:
        pythonVersion: 3.11

  pool:
    vmImage: $(vmImage)

  steps:

    - task: UsePythonVersion@0
      displayName: Use Python $(pythonVersion)
      inputs:
        versionSpec: $(pythonVersion)

    - script: |
        pip install pytest pytest-azurepipelines pytest-cov
        pip install .
        pytest $(testsDirectory) --cov $(package) --cov-report html
      displayName: Run the test suite

    - script: |
        pip install build
        python -m build
      displayName: Build package

    # upload everything in dist/ to the build artifacts for later use or debugging
    - task: PublishPipelineArtifact@0
      displayName: Publish package artifacts
      inputs:
        artifactName: dist$(pythonVersion)
        targetPath: dist

- job: Publish

  pool:
    vmImage: $(vmImage)

  dependsOn: Build

  # only publish when the previous Jobs are successful and building master branch
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  steps:

    # explicitly disable source checkout to keep a pristine environment for publishing
    - checkout: none

    # download from build artifacts
    - download: current
      artifact: dist$(publishedVersion)

    # set the version of Python to use for publishing
    - task: UsePythonVersion@0
      displayName: Use Python $(publishedVersion)
      inputs:
        versionSpec: $(publishedVersion)

    - script: pip install twine
      displayName: Install packages for publishing

    - task: TwineAuthenticate@1
      displayName: Configure twine authentication
      inputs:
        artifactFeed: $(azureProject)/$(artifactFeed)

    - script: twine upload -r $(artifactFeed) --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/dist$(publishedVersion)/*.whl
      displayName: Publish package to artifacts feed
