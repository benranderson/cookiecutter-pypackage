variables:
  # Project configuration
  package: {{ cookiecutter.project_slug }}
  srcDirectory: src/$(package)
  testsDirectory: tests/
  publishedVersion: 3.13

  # Infrastructure
  vmImage: ubuntu-latest

  # Azure DevOps configuration
  azureProject: {{ cookiecutter.azure_project }}
  artifactFeed: {{ cookiecutter.artifact_feed }}
  
trigger:
  - master
  - develop

jobs:

- job: StaticChecks

  pool:
    vmImage: $(vmImage)

  steps:

    - task: UsePythonVersion@0
      displayName: Use Python $(publishedVersion)
      inputs:
        versionSpec: $(publishedVersion)
    
    - script: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
      displayName: Install uv
    
    # ref: https://dev.to/kummerer94/azure-pipelines-uv-cache-46ii
    - bash: |
        echo "##vso[task.setvariable variable=uv-cache-path;]$(uv cache dir)"
      displayName: Get uv cache path
  
    - task: Cache@2
      displayName: Cache uv
      inputs:
        key: uv cache | "$(publishedVersion)"
        path: $(uv-cache-path)

    - script: |
        uv sync --only-dev
      displayName: Install dev dependencies
      env:
        UV_INDEX_ADO_PASSWORD: $(System.AccessToken)
        UV_KEYRING_PROVIDER: disabled

    - script: uv run --only-dev ruff check $(srcDirectory) $(testsDirectory)
      displayName: Linting check

    - script: uv run --only-dev ruff format $(srcDirectory) $(testsDirectory)
      displayName: Formatting check

- job: Build

  strategy:
    matrix:
      python310:
        pythonVersion: 3.10
      python311:
        pythonVersion: 3.11
      python312:
        pythonVersion: 3.12
      python313:
        pythonVersion: 3.13

  pool:
    vmImage: $(vmImage)

  steps:

    - task: UsePythonVersion@0
      displayName: Use Python $(pythonVersion)
      inputs:
        versionSpec: $(pythonVersion)

    - script: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
      displayName: Install uv
    
    - script: |
        uv sync --all-extras
      displayName: Install dependencies
      env:
        UV_INDEX_ADO_PASSWORD: $(System.AccessToken)
        UV_KEYRING_PROVIDER: disabled

    - script: |
        uv run pytest $(testsDirectory) --cov $(package) --cov-report html
      displayName: Run the test suite

    - script: |
        uv build
      displayName: Build package
      env:
        UV_INDEX_ADO_PASSWORD: $(System.AccessToken)
        UV_KEYRING_PROVIDER: disabled

    # upload everything in dist/ to the build artifacts for later use or debugging
    - task: PublishPipelineArtifact@1
      displayName: Publish package artifacts
      inputs:
        targetPath: dist
        artifact: dist$(pythonVersion)
        publishLocation: pipeline

- job: Publish

  pool:
    vmImage: $(vmImage)

  dependsOn: Build

  # only publish when the previous Jobs are successful and building master branch
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  steps:

    # explicitly disable source checkout to keep a pristine environment for publishing
    - checkout: none

    # download from build artifacts
    - download: current
      artifact: dist$(publishedVersion)

    # set the version of Python to use for publishing
    - task: UsePythonVersion@0
      displayName: Use Python $(publishedVersion)
      inputs:
        versionSpec: $(publishedVersion)

    - script: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
      displayName: Install uv

    - script: uv tool install twine
      displayName: Install packages for publishing

    - task: TwineAuthenticate@1
      displayName: Configure twine authentication
      inputs:
        artifactFeed: $(azureProject)/$(artifactFeed)

    - script: twine upload -r $(artifactFeed) --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/dist$(publishedVersion)/*.whl
      displayName: Publish package to artifacts feed
